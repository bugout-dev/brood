/*
Actions to operate with users.
*/
package actions

import (
	"encoding/json"
	"fmt"
	"log"
	"sync"

	brood "github.com/bugout-dev/brood/go/pkg"
	"github.com/google/uuid"
)

var data = map[string][]byte{
	"ok":   []byte(`{"id": "4e4f1efb-21bf-4c69-b2ae-20e80ef85809", "username": "kot"}`),
	"fail": []byte(`{"id": "3a1e2b5d-7e70-4334-ae25-e94a9f673759", "username": "kompot"}`),
}

func GetUserAction(key string) (*brood.User, error) {
	// rows, err := sessionDB.DB.Query("SELECT * FROM users")
	// // for rows.Next() {
	// // 	u := &User{}
	// // 	err = rows.Scan(
	// // 		&u.ID,
	// // 		&u.Username,
	// // 		&u.Email,
	// // 		&u.NormalizedEmail,
	// // 		&u.PasswordHash,
	// // 		&u.AuthType,
	// // 		&u.Verified,
	// // 		&u.CreatedAt,
	// // 		&u.UpdatedAt,
	// // 		&u.Autogenerated,
	// // 		&u.FirstName,
	// // 		&u.LastName,
	// // 		&u.ApplicationID,
	// // 	)
	// // 	fmt.Println(u)
	// // }
	// // rows, _ := database.Query("SELECT * FROM users")
	// // var i uuid.UUID
	// // var u string
	// // for rows.Next() {
	// // 	rows.Scan(&i, &u)
	// // 	fmt.Println(i, u)
	// // }
	if jsonStr, ok := data[key]; ok {
		user := &brood.User{}
		err := json.Unmarshal(jsonStr, user)
		if err != nil {
			return nil, fmt.Errorf("Can't decode json")
		}
		return user, nil
	}
	return nil, fmt.Errorf("User doesn't exist")
}

// Safe to call concurrently
type UserProcessor struct {
	sync.Mutex

	users  map[uuid.UUID]brood.User
	nextID uuid.UUID
}

func New() *UserProcessor {
	us := &UserProcessor{}
	us.users = make(map[uuid.UUID]brood.User)
	return us
}

// Add user to database action
func (us *UserProcessor) CreateUserAction(sessionDB *brood.SessionDB, username, email, password string) (*brood.User, error) {
	us.Lock()
	defer us.Unlock()

	var user brood.User

	user.ID = uuid.New()
	user.Username = username + user.ID.String()
	user.Email = user.ID.String() + email
	user.NormalizedEmail = user.ID.String()
	user.PasswordHash = password
	user.AuthType = "bugout"
	user.Verified = true
	user.Autogenerated = true

	us.users[us.nextID] = user
	us.nextID = user.ID

	row, err := sessionDB.DB.Exec(
		"INSERT INTO users (id, username, email, normalized_email, password_hash, auth_type, verified, autogenerated) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)",
		user.ID,
		user.Username,
		user.Email,
		user.NormalizedEmail,
		user.PasswordHash,
		user.AuthType,
		user.Verified,
		user.Autogenerated,
	)
	if err != nil {
		fmt.Println(err.Error())
	}

	affected, err := row.RowsAffected()
	if err != nil {
		fmt.Println(err.Error())
	}
	log.Printf("%d user with id: %s added to database", affected, user.ID)

	return &user, nil
}
